# Production Dockerfile for Classroom Management Backend
# Multi-stage build for optimized production image

# ==========================================
# Build Stage
# ==========================================
FROM python:3.12-slim as builder

# Set build environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies for building
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    libjpeg-dev \
    libpng-dev \
    libxml2-dev \
    libxslt-dev \
    libffi-dev \
    libssl-dev \
    zlib1g-dev \
    git \
    && rm -rf /var/lib/apt/lists/*

# Create app user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set work directory
WORKDIR /app

# Install uv for fast Python package management
COPY --from=ghcr.io/astral-sh/uv:latest /uv /bin/uv

# Copy dependency files
COPY pyproject.toml requirements.txt ./

# Install Python dependencies
RUN uv pip install --system --no-cache -r requirements.txt

# Copy source code
COPY . .

# Install the application
RUN uv pip install --system --no-cache -e .

# ==========================================
# Production Stage
# ==========================================
FROM python:3.12-slim as production

# Set production environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    ENVIRONMENT=production \
    PLONE_SITE_ID=Plone \
    ZOPE_THREADS=4 \
    ZOPE_FAST_LISTEN=on \
    SECURITY_POLICY_IMPLEMENTATION=C

# Install runtime system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    libjpeg62-turbo \
    libpng16-16 \
    libxml2 \
    libxslt1.1 \
    libffi8 \
    libssl3 \
    zlib1g \
    curl \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create app user for security (non-root)
RUN groupadd -r appuser && useradd -r -g appuser appuser \
    && mkdir -p /app /var/log/classroom /var/cache/classroom \
    && chown -R appuser:appuser /app /var/log/classroom /var/cache/classroom

# Copy Python environment from builder
COPY --from=builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Set work directory
WORKDIR /app

# Copy application code with proper ownership
COPY --chown=appuser:appuser . .

# Create necessary directories
RUN mkdir -p var/filestorage var/blobstorage var/log instance/var/log \
    && chown -R appuser:appuser var/ instance/

# Copy production configuration
COPY --chown=appuser:appuser docker/backend/zope.conf.prod instance/etc/zope.conf
COPY --chown=appuser:appuser docker/backend/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Security hardening
RUN chmod 750 /app \
    && find /app -type f -name "*.py" -exec chmod 644 {} \; \
    && find /app -type d -exec chmod 755 {} \;

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/Plone/@@security-middleware || exit 1

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8080

# Set entrypoint
ENTRYPOINT ["/entrypoint.sh"]
CMD ["instance", "fg"]

# Labels for container metadata
LABEL maintainer="Classroom Management Team" \
      version="1.0.0" \
      description="Production Plone Backend for K-12 Classroom Management" \
      org.opencontainers.image.source="https://github.com/your-org/classroom-management" \
      org.opencontainers.image.title="Classroom Management Backend" \
      org.opencontainers.image.description="Plone-based backend for K-12 classroom management" \
      org.opencontainers.image.version="1.0.0" 